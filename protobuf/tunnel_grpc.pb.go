// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: tunnel.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	Controlling(ctx context.Context, opts ...grpc.CallOption) (Control_ControllingClient, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) Controlling(ctx context.Context, opts ...grpc.CallOption) (Control_ControllingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Control_ServiceDesc.Streams[0], "/pb.Control/Controlling", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlControllingClient{stream}
	return x, nil
}

type Control_ControllingClient interface {
	Send(*CtrlMessage) error
	Recv() (*CtrlMessage, error)
	grpc.ClientStream
}

type controlControllingClient struct {
	grpc.ClientStream
}

func (x *controlControllingClient) Send(m *CtrlMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlControllingClient) Recv() (*CtrlMessage, error) {
	m := new(CtrlMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	Controlling(Control_ControllingServer) error
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) Controlling(Control_ControllingServer) error {
	return status.Errorf(codes.Unimplemented, "method Controlling not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_Controlling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServer).Controlling(&controlControllingServer{stream})
}

type Control_ControllingServer interface {
	Send(*CtrlMessage) error
	Recv() (*CtrlMessage, error)
	grpc.ServerStream
}

type controlControllingServer struct {
	grpc.ServerStream
}

func (x *controlControllingServer) Send(m *CtrlMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlControllingServer) Recv() (*CtrlMessage, error) {
	m := new(CtrlMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Control",
	HandlerType: (*ControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Controlling",
			Handler:       _Control_Controlling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}

// ForwardClient is the client API for Forward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwardClient interface {
	Forwarding(ctx context.Context, opts ...grpc.CallOption) (Forward_ForwardingClient, error)
}

type forwardClient struct {
	cc grpc.ClientConnInterface
}

func NewForwardClient(cc grpc.ClientConnInterface) ForwardClient {
	return &forwardClient{cc}
}

func (c *forwardClient) Forwarding(ctx context.Context, opts ...grpc.CallOption) (Forward_ForwardingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Forward_ServiceDesc.Streams[0], "/pb.Forward/Forwarding", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwardForwardingClient{stream}
	return x, nil
}

type Forward_ForwardingClient interface {
	Send(*ForwardMessage) error
	Recv() (*ForwardMessage, error)
	grpc.ClientStream
}

type forwardForwardingClient struct {
	grpc.ClientStream
}

func (x *forwardForwardingClient) Send(m *ForwardMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *forwardForwardingClient) Recv() (*ForwardMessage, error) {
	m := new(ForwardMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForwardServer is the server API for Forward service.
// All implementations must embed UnimplementedForwardServer
// for forward compatibility
type ForwardServer interface {
	Forwarding(Forward_ForwardingServer) error
	mustEmbedUnimplementedForwardServer()
}

// UnimplementedForwardServer must be embedded to have forward compatible implementations.
type UnimplementedForwardServer struct {
}

func (UnimplementedForwardServer) Forwarding(Forward_ForwardingServer) error {
	return status.Errorf(codes.Unimplemented, "method Forwarding not implemented")
}
func (UnimplementedForwardServer) mustEmbedUnimplementedForwardServer() {}

// UnsafeForwardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwardServer will
// result in compilation errors.
type UnsafeForwardServer interface {
	mustEmbedUnimplementedForwardServer()
}

func RegisterForwardServer(s grpc.ServiceRegistrar, srv ForwardServer) {
	s.RegisterService(&Forward_ServiceDesc, srv)
}

func _Forward_Forwarding_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForwardServer).Forwarding(&forwardForwardingServer{stream})
}

type Forward_ForwardingServer interface {
	Send(*ForwardMessage) error
	Recv() (*ForwardMessage, error)
	grpc.ServerStream
}

type forwardForwardingServer struct {
	grpc.ServerStream
}

func (x *forwardForwardingServer) Send(m *ForwardMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *forwardForwardingServer) Recv() (*ForwardMessage, error) {
	m := new(ForwardMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Forward_ServiceDesc is the grpc.ServiceDesc for Forward service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forward_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Forward",
	HandlerType: (*ForwardServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forwarding",
			Handler:       _Forward_Forwarding_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
